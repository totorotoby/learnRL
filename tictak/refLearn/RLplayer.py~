import sys
sys.path.append('/home/toby/tictak/util')
import random
from Util import *
#from Game import Board

class RLplayer:

    
    def __init__(self, number):

        self.number = number
        self.board = None
        self.val_tab = {}
        self.init_val()
        self.gL = None
        self.learn_rate = .01
        self.explore_rate = 1


    # reads in all states and assigns them starting values   
    def init_val(self):

        filenames = ['refLearn/p0_wins', 'refLearn/all_other_states', 'refLearn/p1_wins']

        to_update = []
        for i in range(3):
            file = open(filenames[i], 'r')
            flist = file.read().split('\n')
            to_update.append(flist)


        vals = [1, .5, 0]
        if self.number == 1:
            to_update.reverse()
        for i in range(3):
            for j in range(len(to_update[i])-1):
                self.val_tab[int(to_update[i][j])] = vals[i]



    # takes in new board, and resets gL
    def update_board(self, board):
        self.board = board
        self.gL = []

        
    #### rewrite! ####
    # after a game is finished values need to updated
    #def update_values(self):
    
        
    # returns the next more being random with probablity explore_rate, or maximize with 1 - expolore_rate
    def play(self):

        self.gL.append(self.board.tic)

        p_type = bin_random(self.explore_rate)
                
        if p_type:
            random_move = self.random_square()
            self.gL.append(random_move[1])
            print('player:', self.number)
            
            for state in self.gL:
                print(state, string_board(state))
            
            return random_move[0]
    
        if not p_type:

            max_move = self.max_square()
            self.gL.append(max_move[1])
            return max_move[0]

    
    # returns completely random square that can be played from the current board
    def random_square(self):

        to_choose = self.board.unoccupied()
        new_square = random.choice(to_choose)
        return new_square, get_move_update(self.board.tic, new_square, self.number)


    
    # returns square with highest value
    # rewrite #
    #def max_square(self):



    # print method for when things get updateded    
    def print_game_vals(self):

        print('player ' + str(self.number) +' has updated: ')
        count = 0
        for state in self.gL:
            print(state, self.val_tab[state], count)
            count += 1
        print()

    # takes in a single board and searches to find it in val_tab and returns its number (board)
    # otherwise if it cannot be found it adds it to val_tab and returns orginal
#    def search_equiv(self, board):
        

        
    # takes in a board and returns the board and its 9 other flips
    def gen_flips(self, b1):

        boards = []
        boards.append([b1, ''])

        string = 'MHLR'
        count = 0
        for i in string:
            
            flip = None
            
            flip = self.flip_board(b1, i)
            boards.append([flip, i])
            
            for j in range (count + 1, len(string)):
                toadd = self.flip_board(flip, string[j])
                boards.append([toadd, i+string[j]])
                
            count += 1

        return boards

    
    # swaps squares on the board
    def swap_squares(self, board, s1, s2):

        sb1 = square_to_bit(s1)
        sb2 = square_to_bit(s2)

        new = swap_bits(board, sb1[0], sb2[0])
        new = swap_bits(new, sb1[1], sb2[1])
    
        return new
    

    #returns the give boad but flipped over the given axis
    def flip_board(self, board, axis):

        flipped = board
        for i in range(len(axis)):
        
            if axis[i] == 'M':
            
                flipped = self.swap_squares(flipped, 0, 2)
                flipped = self.swap_squares(flipped, 3, 5)
                flipped = self.swap_squares(flipped, 6, 8)
            
            if axis[i] == 'H':

                flipped = self.swap_squares(flipped, 0, 6)
                flipped = self.swap_squares(flipped, 1, 7)
                flipped = self.swap_squares(flipped, 2, 8)
        
            if axis[i] == 'L':

                flipped = self.swap_squares(flipped, 1, 3)
                flipped = self.swap_squares(flipped, 2, 6)
                flipped = self.swap_squares(flipped, 5, 7)

            if axis[i] == 'R':
                        
                flipped = self.swap_squares(flipped, 0, 8)
                flipped = self.swap_squares(flipped, 1, 5)
                flipped = self.swap_squares(flipped, 3, 7)
            
        return flipped

test = RLplayer(0)
